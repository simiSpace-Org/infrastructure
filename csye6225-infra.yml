AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 IaC Demo
# a) Create VPC
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "172.31.0.0/16"
  # 3 ref to Subnets
  PublicSubnet1CIDR:
    Description: "Public Subnet 1 CIDR block"
    Type: String
    Default: "10.0.0.0/24"
  PublicSubnet2CIDR:
    Description: "Public Subnet 2 CIDR block"
    Type: String
    Default: "10.0.1.0/24"  
  PublicSubnet3CIDR:
    Description: "Public Subnet 1 CIDR block"
    Type: String
    Default: "10.0.2.0/24"
  # 3 ref to Private Subnets  
  PrivateSubnet1CIDR:
    Description: " Private Subnet 1 CIDR block"
    Type: String
    Default: "10.0.3.0/24"
  PrivateSubnet2CIDR:
    Description: "Private Subnet 2 CIDR block"
    Type: String
    Default: "10.0.4.0/24"
  PrivateSubnet3CIDR:
    Description: "Private Subnet 3 CIDR block"
    Type: String
    Default: "10.0.5.0/24"  
  ami:
    Description: "ami ID"
    Type: String
    Default: "ami-0cd10560d02b09aae"  
  bucketLastName:
    Description: "bucket name"
    Type: String 
    Default: "dev.simiicodes.me" 
  awsregion:
    Description: "aws region"
    Type: String 
    Default: "us-east-1"
  awsaccesskey:
    Description: "aws access key"
    Type: String 
    Default: ""
  awssecretkey:
    Description: "aws secret key"
    Type: String 
    Default: "" 
  dbusername:
    Description: "db username"
    Type: String 
    Default: "csye6225" 
  dbpassword:
    Description: "db password"
    Type: String 
    Default: "Coco@786"    


Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

#b) Create Internet Gateway
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
#Attach VPC to Internet Gateway
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref myInternetGateway
      VpcId: !Ref myVPC
#Create 3 subnets, each in a different availability zone in the same region in the same VPC
  myPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1
  myPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2
  myPublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 2, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 3 
      
#Create Route Table 
  myPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
# Attach Route table to 3 subnets
# Create default Route 
  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: myVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref myInternetGateway
#Associate public route tables with subnets
  myPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref myPublicSubnet1
  myPublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref myPublicSubnet2
  myPublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPublicRouteTable
      SubnetId: !Ref myPublicSubnet3 

#Create 3  private subnets, each in a different availability zone in the same region in the same VPC
  myPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet 1   
  myPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet 2 
  myPrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ 2, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: Private Subnet 3 
#Create Private Route Table 
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      
#Associate Private route tables with subnets
  myPrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet1
  myPrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet2
  myPrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref myPrivateRouteTable
      SubnetId: !Ref myPrivateSubnet3      

#Create Security Groups
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow http to client host
      GroupName: applicationsecuritygroup 
      SecurityGroupEgress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName 
      VpcId: !Ref myVPC
# Database Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - ApplicationSecurityGroup
      - myVPC
    Properties: 
      GroupDescription: Link to application security group
      GroupName: databasesecuritygroup
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      VpcId: !Ref myVPC 

#Create S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub '${AWS::StackName}.dev.simiicodes.me'
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: Rule for log prefix
            Prefix: logs
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 365 
#RDS DB Subnet Group
  dBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: Private Subnet Group for Database
      DBSubnetGroupName: DBSubnetGroup
      SubnetIds: 
        - !Ref myPrivateSubnet1
        - !Ref myPrivateSubnet2

#RDS Parameter Group
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: CloudFormation Sample postgres Parameter Group
      Family: postgres12
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
#RDS instance
  myRdsInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      AllocatedStorage: '20'
      Engine: postgres
      EngineVersion: 12.9
      DBInstanceClass: db.t2.micro
      DBInstanceIdentifier: csye6225
      MasterUsername: csye6225
      MasterUserPassword: csye6225password
      DBSubnetGroupName: !Ref dBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      PubliclyAccessible: false
      DBName: csye6225
      Port: '5432' 
#S3 IAM Policy 
  WebAppS3:
    Type: AWS::IAM::ManagedPolicy
    DependsOn: S3Bucket
    Properties:
      ManagedPolicyName: EC2-S3-Access
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowGetPutDeleteActionsOnS3Bucket
            Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource: !Sub 
              - '${bucketArn}/*'
              - bucketArn: !GetAtt 
                  - S3Bucket
                  - Arn 
#Create IAM Role
  iamRole:
    Type: AWS::IAM::Role
    DependsOn: WebAppS3
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      RoleName: EC2-CSYE6225
      ManagedPolicyArns:
        - !Ref WebAppS3

#Create EC2 Instance
  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref ami
      KeyName: "simis_cloud"
      InstanceType: "t2.micro"
      Tags:
        - Key: Name
          Value: "Simi_AMI"
      BlockDeviceMappings: 
      - DeviceName: "/dev/sdm"
        Ebs: 
          VolumeType: "io1"
          Iops: "200"
          DeleteOnTermination: "false"
          VolumeSize: "20"
      - DeviceName: "/dev/sdk"
        NoDevice: {}
      SecurityGroupIds:
          - !Ref ApplicationSecurityGroup
      SubnetId: !Ref myPublicSubnet1
      UserData: 
        Fn::Base64: !Sub | 
          #!/bin/bash 
          sudo touch /tmp/webservice/.env
          sudo chmod -R 777 /tmp/webservice/.env
          sudo chown ec2-user:ec2-user /tmp/webservice/.env
          sudo echo 'AWS_BUCKET_NAME=${S3Bucket}' >> /tmp/webservice/.env
          sudo echo 'AWS_BUCKET_REGION=${awsregion}' >> /tmp/webservice/.env
          sudo echo 'AWS_ACCESS_KEY=${awsaccesskey}' >> /tmp/webservice/.env
          sudo echo 'AWS_SECRET_KEY=${awssecretkey}' >> /tmp/webservice/.env
          sudo echo 'USERNAME=${dbusername}' >> /tmp/webservice/.env
          sudo echo 'PASSWORD=${dbpassword}' >> /tmp/webservice/.env
          sudo echo 'HOSTNAME=${myRdsInstance.Endpoint.Address}' >> /tmp/webservice/.env

              
        
        
  
      

      

              